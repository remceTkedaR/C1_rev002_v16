FUNCTION "05_S_variables_SCADA" : Void
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_TEMP 
      TimeHz_DInt : DInt;
      TimeK1_ONDInt : DInt;
      TimeK2_ONDInt : DInt;
      TimeK1_OFFDInt : DInt;
      TimeK2_OFFDInt : DInt;
      tmpTimerSet_O2_Up : DInt;   // Pomocnicza wynik po mnozeniu [ms] czasu do zwiekszenia bar
      tmpQ1 : Int;   // pompcnicza przy konwersji z real do int
      tmpQ2 : Int;   // pompcnicza przy konwersji z real do int
      TimeK3_ONDInt : DInt;
      TimeK3_OFFDInt : DInt;
   END_VAR


BEGIN
	(*
	//=============================================================================
	//(JZWiK S.A Radosław Tecmer)
	//(c)Copyright (2021) All Rights Reserved
	//-----------------------------------------------------------------------------
	//Testowane z:   (system docelowy z  FW 4.2)
	//Pakiet inżynierski:   TIA Portal (V14 Sp1 Update 9)
	//Ograniczenia:  ( - )
	//Wymagania:  (minimalne S7-1200 CPU 1214 FW 3.2 .)
	//Funkcjonalnośc: (Kopiowanie bloków danych z - do bloku SCADA )
	//-----------------------------------------------------------------------------
	//Zmainy wprowadzone:
	//Wersja  Data       Osoba wprowadzająca zmiany - ekspert
	//01.00.00 17.11.2021 (Tecmer Radosław - twórca) Pieresza wersja 01.00.00
	//=============================================================================
	*)
	
	//
	// Staus napędów P1 P2 P3 P4 POSTÓJ, FALOWNIK, SIEĆ
	//P1
	REGION Status napędów
	  IF "IsRunInverter_P1" THEN
	    // Przekazanie wartości do instancji DB10 (1= falownik)
	    "db10datablock".ins_ModeWorkContactronP1 := 1;
	    ;
	  END_IF;
	  IF "IsRunNetwork_P1" THEN
	    // Przekazanie wartości do instancji DB10 (2= sieć)
	    "db10datablock".ins_ModeWorkContactronP1 := 2;
	    ;
	  END_IF;
	  IF ("IsRunNetwork_P1" = FALSE) AND ("IsRunInverter_P1" = FALSE) THEN
	    // Przekazanie wartości do instancji DB10 (0= postój)
	    "db10datablock".ins_ModeWorkContactronP1 := 0;
	    ;
	  END_IF;
	  // P2
	  IF "IsRunInverter_P2" THEN
	    // Przekazanie wartości do instancji DB10 (1= falownik)
	    "db10datablock".ins_ModeWorkContactronP2 := 1;
	    ;
	  END_IF;
	  IF "IsRunNetwork_P2" THEN
	    // Przekazanie wartości do instancji DB10 (2= sieć)
	    "db10datablock".ins_ModeWorkContactronP2 := 2;
	    ;
	  END_IF;
	  IF ("IsRunNetwork_P2" = FALSE) AND ("IsRunInverter_P2" = FALSE) THEN
	    // Przekazanie wartości do instancji DB10 (0= postój)
	    "db10datablock".ins_ModeWorkContactronP2 := 0;
	    ;
	  END_IF;
	  //P3
	  IF "IsRunInverter_P3" THEN
	    // Przekazanie wartości do instancji DB10 (1= falownik)
	    "db10datablock".ins_ModeWorkContactronP3 := 1;
	    ;
	  END_IF;
	  IF "IsRunNetwork_P3" THEN
	    // Przekazanie wartości do instancji DB10 (2= sieć)
	    "db10datablock".ins_ModeWorkContactronP3 := 2;
	    ;
	  END_IF;
	  IF ("IsRunNetwork_P3" = FALSE) AND ("IsRunInverter_P3" = FALSE) THEN
	    // Przekazanie wartości do instancji DB10 (0= postój)
	    "db10datablock".ins_ModeWorkContactronP3 := 0;
	    ;
	  END_IF;
	  
	  
	  
	  //Zmienne na potrzreby trendów WinCC - Praca pomp
	  //pompa P1
	  IF ("IsRun_P1") = TRUE
	    
	  THEN
	    "db10datablock".act_stanP1 := 5;
	  ELSE
	    "db10datablock".act_stanP1 := 0;
	  END_IF;
	  //pompa P2
	  IF ("IsRun_P2") = TRUE
	    
	  THEN
	    "db10datablock".act_statnP2 := 6;
	  ELSE
	    "db10datablock".act_statnP2 := 0;
	  END_IF;
	  //pompa P3
	  IF ("IsRun_P3") = TRUE
	    
	  THEN
	    "db10datablock".act_stanP3 := 7;
	  ELSE
	    "db10datablock".act_stanP3 := 0;
	  END_IF;
	  
	  
	  
	  
	  // Zasuwy Pompownia
	  // 
	  // Status napędów Z11, 
	  "dbdane".Z11_Status := "dbHoldRegSlave_to_MT101".instvValveZ11;
	  // Status napędów Z12, 
	  "dbdane".Z12_Status := "dbHoldRegSlave_to_MT101".instvValveZ12;
	  
	  
	  
	END_REGION
	
	
	//********************
	
	
	REGION Region PID Zmienne
	  // Zmienne PID
	  //Limit górny wartości procesowej MV [%]
	  "dbdane"."PID_Compact_1_sPid_Cmpt.r_Lmn_Hlm" := "dbtags_Sterowanie".SetupControlPompownia.r_Lmn_Hlm;
	  "PID_Compact_1".sPid_Cmpt.r_Lmn_Hlm := "dbdane"."PID_Compact_1_sPid_Cmpt.r_Lmn_Hlm";
	  //Limit dolny wartości procesowej MV [%]
	  "dbdane"."PID_Compact_1_sPid_Cmpt.r_Lmn_Llm" := "dbtags_Sterowanie".SetupControlPompownia.r_Lmn_Llm;
	  "PID_Compact_1".sPid_Cmpt.r_Lmn_Llm := "dbdane"."PID_Compact_1_sPid_Cmpt.r_Lmn_Llm";
	  //Obiekt zreczywisty***
	  // Max wartość procesowa 
	  "dbdane"."PID_Compact_1sPid_Cmpt.r_Pv_Norm_OUT_2" := "dbtags_Sterowanie".SetupControlPompownia.r_Pv_Norm_OUT_2;
	  "PID_Compact_1".sPid_Cmpt.r_Pv_Norm_OUT_2 := "dbdane"."PID_Compact_1sPid_Cmpt.r_Pv_Norm_OUT_2";
	  //Min wartość procesowa
	  "dbdane"."PID_Compact_1_sPid_Cmpt.r_Pv_Norm_OUT_1" := "dbtags_Sterowanie".SetupControlPompownia.r_Pv_Norm_OUT_1;
	  "PID_Compact_1".sPid_Cmpt.r_Pv_Norm_OUT_1 := "dbdane"."PID_Compact_1_sPid_Cmpt.r_Pv_Norm_OUT_1";
	  //******
	  
	  
	  //Limmit górny zadawania
	  "dbdane"."PID_Compact_1_sPid_Cmpt.r_Sp_Hlm" := "dbtags_Sterowanie".SetupControlPompownia.r_Sp_Hlm;
	  "PID_Compact_1".sPid_Cmpt.r_Sp_Hlm := "dbdane"."PID_Compact_1_sPid_Cmpt.r_Sp_Hlm";
	  //Limit dolny zadawania
	  "dbdane"."PID_Compact_1_sPid_Cmpt.r_Sp_Llm" := "dbtags_Sterowanie".SetupControlPompownia.r_Sp_Llm;
	  "PID_Compact_1".sPid_Cmpt.r_Sp_Llm := "dbdane"."PID_Compact_1_sPid_Cmpt.r_Sp_Llm";
	  
	
	  
	END_REGION
	
	REGION Sterowanie czasem zmiany wartości ciśnienia w modelu regulacji nadążnej 
	  
	  //Opóznienie zwiększania watrości ciśnieniea  konwersja i przekaznie do zmiennej tymczasowej 
	  #tmpTimerSet_O2_Up := INT_TO_DINT("db10datablock".TimeHistere_set_bar);
	  
	  //Przekazanie do Timera -Zadany czas [ms] zwłoki zwiekszenia ciśnienia
	  "dbtags_Sterowanie".SetupControlPompownia.TimerSet_O2_Up.PT := DINT_TO_TIME(#tmpTimerSet_O2_Up * "MS_TO_M");
	  //Przekazanie do Timera -Zadany czas [ms] zwłoki zmniejszenia ciśnienie
	  "dbtags_Sterowanie".SetupControlPompownia.TimerSet_O2_Down.PT := DINT_TO_TIME(#tmpTimerSet_O2_Up * "MS_TO_M");
	  
	END_REGION
	
	
	
	//Wybór modelu syerowania - 0 wyłączone 3 automat 4- ręczne
	"dbtags_Sterowanie".SetupControlPompownia.Switch_Aut_Rem_Pompy := "dbmanagement".sterowanie_1.tryb_automat;
	
	
	
	REGION Przekazanie zmiennych sterowania
	  
	  //Wspólczynnik korekty ostrzeżęń wyokiego i niskiego PV HWrn, PV LWrn 
	  //Wsółcynnik ten koryguje poziom alarmu PID górnego i dolnego odpowiadających
	  //za dołączenie i odączenie dodatkowych kompresorów 
	  
	  
	  //Czas oczekiwania na 50 Hz  konwersja i przekaznie do zmiennej tymczasowej 
	  #TimeHz_DInt := INT_TO_DINT("dbtags_Sterowanie".SetupControlPompownia.TimeHz);
	  
	  //Czas oczekiwania na 50Hz 
	  "dbdane".TMR_Hz := DINT_TO_TIME(#TimeHz_DInt * "MS_TO_S");
	  
	  REGION TMR K1 pierwsza dodatkowa
	    // Czas zwłoki
	    //Czas oczekiwania na K1_ON  konwersja "i" przekaznie DO zmiennej tymczasowej 
	    #TimeK1_ONDInt := INT_TO_DINT("dbtags_Sterowanie".SetupControlPompownia.Time_ONK1);
	    
	    //Czas oczekiwania na K1_ON 
	    "dbdane".TMR_ON_K1 := DINT_TO_TIME(#TimeK1_ONDInt * "MS_TO_S");
	    
	    //Czas oczekiwania na K1_OFF  konwersja i przekaznie do zmiennej tymczasowej 
	    #TimeK1_OFFDInt := INT_TO_DINT("dbtags_Sterowanie".SetupControlPompownia.Time_OFFK1);
	    
	    //Czas oczekiwania na K1_OFF 
	    "dbdane".TMR_OFF_K1 := DINT_TO_TIME(#TimeK1_OFFDInt * "MS_TO_S");
	    
	  END_REGION
	  
	  REGION TMR K2 druga dodatkowa
	    // Czas zwoki
	    //Czas oczekiwania na K2_ON  konwersja i przekaznie do zmiennej tymczasowej 
	    #TimeK2_ONDInt := INT_TO_DINT("dbtags_Sterowanie".SetupControlPompownia.Time_ONK2);
	    
	    //Czas oczekiwania na K2_ON 
	    "dbdane".TMR_ON_K2 := DINT_TO_TIME(#TimeK2_ONDInt * "MS_TO_S");
	    
	    //Czas oczekiwania na K2_OFF  konwersja i przekaznie do zmiennej tymczasowej 
	    #TimeK2_OFFDInt := INT_TO_DINT("dbtags_Sterowanie".SetupControlPompownia.Time_OFFK2);
	    
	    //Czas oczekiwania na K2_OFF 
	    "dbdane".TMR_OFF_K2 := DINT_TO_TIME(#TimeK2_OFFDInt * "MS_TO_S");
	    
	  END_REGION
	  
	  REGION TMR K3 druga dodatkowa
	    // Czas zwoki
	    //Czas oczekiwania na K3_ON  konwersja i przekaznie do zmiennej tymczasowej 
	    #TimeK3_ONDInt := INT_TO_DINT("dbtags_Sterowanie".SetupControlPompownia.Time_ONK3);
	    
	    //Czas oczekiwania na K3_ON 
	    "dbdane".TMR_ON_K3 := DINT_TO_TIME(#TimeK3_ONDInt * "MS_TO_S");
	    
	    //Czas oczekiwania na K3_OFF  konwersja i przekaznie do zmiennej tymczasowej 
	    #TimeK3_OFFDInt := INT_TO_DINT("dbtags_Sterowanie".SetupControlPompownia.Time_OFFK3);
	    
	    //Czas oczekiwania na K3_OFF 
	    "dbdane".TMR_OFF_K3 := DINT_TO_TIME(#TimeK2_OFFDInt * "MS_TO_S");
	    
	  END_REGION
	  
	  
	  //Aktualna zadana wartość ciśnienia do regulatora
	  CASE "dbHoldRegSlave_to_MT101".instSygSter_1 OF
	      
	    3:
	      "dbdane".Setpoint_SV := "dbdane".Setpoint_bar_automat;
	    4:
	      "dbdane".Setpoint_SV := "dbdane".Setpoint_bar_automat;
	      
	    ELSE
	      "dbdane".Setpoint_SV := 0.0;
	      ;
	  END_CASE;
	  
	END_REGION
	
	
	REGION Analogi 
	  
	  //************ parametry analogowe**************
	  //Aktualna mierzona wartość ciśnienia zasilania B5
	  "dbdane".Act_Value_B5_magistrala_bar := "dbdane".act_Value_B5;
	  "dbHoldRegSlave_to_MT101".instB5bar_act := "dbdane".act_Value_B5;
	  //Aktualna mierzona wartość ciśnienia  kierunek miasto B6
	  "dbHoldRegSlave_to_MT101".instB6bar_act := "dbdane".act_Value_B6;
	  
	  //Aktualna mierzona wartość ciśnienia  pompownia B7
	  //"db10datablock".instB7_bar_act_pompownia := "dbdane".act_Value_B5;
	  //"dbHoldRegSlave_to_MT101".instB7bar_act := "db10datablock".instB7_bar_act_pompownia;
	  
	  
	END_REGION
	
	
	REGION Poziom w zbiornikach
	  // przekazanie
	  "dbHoldRegSlave_to_MT101".instLevelTank1 := "dbdane".actLevel_Tank1;
	  "dbHoldRegSlave_to_MT101".instLevelTank2 := "dbdane".actLevel_Tank2;
	  "dbHoldRegSlave_to_MT101".instLevelTank3 := "dbdane".actLevel_Tank3;
	  
	  
	  
	END_REGION
	
	
	
	REGION Alarmy 
	  // Sygnały alarmów systemu sterowania i komunikacji
	  "HMI.alarm_02" := "dbmanagement".sterowanie_1."alarm-warning";
	  "HMI.alarm_01" := "dbmanagement".sterowanie_1."alarm-modbus";
	  
	  
	END_REGION
	
	
	
	// Falownik i zasilania RS
	REGION Counter Event OverTemp's OverVolt's from Inverters
	  // Falownik pomp
	  "dbdane".CounterOverTempFa := "dbMasterData".ID26_Inver_OverTemp_415040_Fal.typeDataInverter_int[0];
	  "dbdane".CounterOverVoltFal := "dbMasterData".ID26_Inver_OverVolts_415050_Fal.typeDataInverter_int[0];
	
	  "HMI.gotowość_falownik_1" := "dbmanagement".awaria_falownika_F1;
	  "HMI.przeciążenie_falownika" := "IsCurrentOverloadInverter";
	  // RS
	  "HMI.brak_zasilania" := "dbmanagement".brak_zasilania_RS;
	  
	  
	END_REGION
	
	
	REGION Manual zadane Hz (SV)
	  // konwertowanie wartości manualnie zadawanych Hz z Real do Word
	  "dbdane".tmpManualSV := REAL_TO_LREAL("dbdane".Manual_SV);
	  "dbdane".ManualSV_Int := LREAL_TO_INT("dbdane".tmpManualSV);
	  
	  
	END_REGION
	
	
	
	REGION Modbus staus, error
	  // Status Modbus slave
	  "db10datablock".RTU_MPP04_1errorStatus := "dbTags_master_ABB_1".modbusMaster.errorStatus;
	  //"db10datablock".RTU_MPP04_2errorStatus := "dbTags_master_MPP04_2".modbusMaster.errorStatus;
	  "db10datablock".RTU_Fal_1errorStatus := "dbTags_master_Fal_1".modbusMaster.errorStatus;
	  //Status Modbus master
	  "db10datablock".RTU_MT101 := "dbTags_slave_RTU".modbusMaster.errorStatus;
	  "tags_HMI_ModbusRTU_Error_inverter" := "dbmanagement".sterowanie_1.awaria_modbus_falownik;
	  "tags_HMI_ModbusRTU_Error_flower" := "dbmanagement".sterowanie_1.awaria_modbus_przepływ_pomp;
	  "tags_HMI_ModbusRTU_Error_fmt101" := "dbmanagement".sterowanie_1.awaria_modbus_mt101;
	  
	  
	END_REGION
	
	REGION Modbus master PLC S7 1200 - Przepływomierz Q1 pompownia
	  // przekazanie wartości Real
	  
	  "dbHoldRegSlave_to_MT101".instFlowDN225_act := "dbdane".actPrzepływQ1_Real;
	
	  
	  // Sumay przepływu 
	 
	  "dbHoldRegSlave_to_MT101".instFlowDN225_sum := "dbModbusRTU_Reg"."Przepływomierz nr1 pompownia".ID6_objętość_VF_Adres_2;
	  
	END_REGION
	
	
	
	REGION Modbus RTU Falownik 
	  // Słowo statusu 
	  "HMI.SłowoStatus_Falownik1" := "dbModbusRTU_Reg".received26_Inver_Status_word_416030.typeDataInverter_int[0];
	  "dbHoldRegSlave_to_MT101".instCurrent_Inverter := REAL_TO_INT("dbtags_Sterowanie".SetupControlPompownia.MotorCurrent_Inverter_Pompy);
	  "dbHoldRegSlave_to_MT101".instHz_Inverter := REAL_TO_INT("dbtags_Sterowanie".SetupControlPompownia.Frequency_inverter_Pompy);
	END_REGION
	
	
	
	
	
	
	
	
	  
	  
	
	
	
	
END_FUNCTION

